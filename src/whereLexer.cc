#line 1 "whereLexer.cc"

#line 3 "whereLexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer _whereLexer_FlexLexer

#ifdef yyalloc
#define _whereLexer_alloc_ALREADY_DEFINED
#else
#define yyalloc _whereLexer_alloc
#endif

#ifdef yyrealloc
#define _whereLexer_realloc_ALREADY_DEFINED
#else
#define yyrealloc _whereLexer_realloc
#endif

#ifdef yyfree
#define _whereLexer_free_ALREADY_DEFINED
#else
#define yyfree _whereLexer_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 56
#define YY_END_OF_BUFFER 57
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[327] =
    {   0,
        0,    0,   57,   55,   54,   54,    1,   55,   21,   16,
       55,   55,   19,   18,   17,   55,   20,   45,   45,    6,
        9,    8,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   22,   55,   15,    2,
       54,    4,    0,   51,    0,   13,   12,   14,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   23,
        0,   45,   45,   45,    0,   48,   47,    0,    3,    5,
       10,    7,    0,   44,   44,    0,   44,   44,   44,   44,
       26,   44,   44,   44,   44,   44,   27,   44,   44,   44,
        0,    0,   11,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   45,   48,   47,   46,
        0,   28,   29,    0,   44,   44,   44,   44,   44,   44,
       44,   24,   44,   44,   44,   30,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
        0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   44,   44,   44,   44,   44,   44,   44,
       31,   44,   25,   44,   44,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   44,   44,   44,   44,   44,   44,   32,   44,   44,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   33,   44,
       44,   34,   44,   44,   44,   44,    0,    0,   52,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
       35,   44,   44,   44,   44,   44,    0,    0,    0,    0,
        0,    0,    0,    0,   36,   44,   44,   41,   44,    0,
        0,    0,    0,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   39,   44,   44,   44,
       44,   44,   42,   44,   44,   44,   40,   44,   44,   44,
       43,   37,   44,   44,   38,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   13,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   30,   32,   33,   34,   35,   36,   37,
       30,   38,   39,   40,   41,   30,   42,   43,   44,   30,
       45,   46,   47,   48,   49,   50,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   30,   32,   33,   34,   35,
       36,   37,   30,   38,   39,   40,   41,   30,   42,   43,
       44,   30,    1,   51,    1,   52,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[53] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    4,    1,    5,
        1,    6,    7,    8,    8,    1,    9,    9,   10,    1,
        1,    1,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   10,    1,   13,    1,   12,    4,
        1,    1
    } ;

static const flex_int16_t yy_base[377] =
    {   0,
        0,    0,  311, 1574,   51,   53,  264,   52, 1574,   54,
       51,  105,  266,   45,   47,   49, 1574,   53,   58,   56,
      198,  195,   55,   60,   67,   69,   81,   87,   95,   90,
       97,  102,  101,  104,  115,  117, 1574,   81,  159, 1574,
       90, 1574,  128, 1574,    0, 1574, 1574, 1574,  129,    0,
      174,  147,  137,  139,  141,  223,  158,  167,  153, 1574,
      154,  146,  167,  180,  188,  135,  117,    0, 1574, 1574,
     1574, 1574,  126,  122,  164,    0,  182,  197,  189,  201,
      190,  203,  215,  209,  217,  200,  204,  214,  216,  229,
      243,    0, 1574,  248,  247,  253,  266,    0,  255,    0,

      254,  273,  300,  303,  266,  321,  323,    0,  279,  335,
      119,  339,    0,  262,    0,  148,  270, 1574,   69,    0,
      259,  284,  282,   41,  318,  321,  325,  314,  330,  331,
      332,  333,  335,  337,  348,  336,  349,  350,  357,  362,
      361,  292,  354,  384,  373,  402,  419, 1574,  432,  414,
      438, 1574,  440,  457,  459,  463,  393,  380,  461,  384,
      474,   37,  392,  459, 1574,  464,  466,  369,  465,  467,
      380,  478,  409,  480,  470,  439,  447,  475,  524,  550,
      527,  484,  395,  556,  514,  529,  569,  492,  547,    0,
      478,    0,  573,  531,   60,  581,    0,  510,    0,  575,

      553,  566,  571,  573,  576,  578,  577,  579,  583,  586,
      590,  482,  630,  584,  633,  639,  651,    0,  591,  612,
      657,  598,  617,  664,  622,  667,   32,  630,  641,  657,
      659,  642,  661,  665,  671,  668,  715,  687, 1574,  717,
      681,  735,  737,  749,  678,  680,  695,  751,    0,  683,
        0,  753, 1574,   50,  755,    0,  700,    0,  769,  714,
      722,  735,  759,  761,  762,  763,  592,  781,  783,  773,
      735,  807,   13,  779,  778,  781,  783,  787,  791,  783,
      803,  828,  804,  799,  802,  800,  823,  813,  821,  826,
      829,  828,  837,  839,  843,  841,  847,  849,  851,  864,

      853,  861,  875,  865,  871,  877,  801,  888,  889,  890,
      894,  891,  898,  905,  903,  904,  899,  918,  907,  900,
      916,  917,  932,  924,  927, 1574,  977,  990, 1002, 1007,
     1019, 1032, 1045, 1058, 1071, 1083, 1095, 1100, 1111, 1123,
     1136, 1149, 1162, 1175, 1180, 1190, 1202, 1214, 1227, 1240,
     1253, 1266, 1279, 1291, 1303, 1316, 1329, 1342, 1354, 1366,
     1378, 1383, 1394, 1407, 1420, 1433, 1445, 1457, 1470, 1483,
     1496, 1509, 1521, 1534, 1547, 1560
    } ;

static const flex_int16_t yy_def[377] =
    {   0,
      326,    1,  326,  326,  326,  326,  326,  327,  326,  326,
      328,  329,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  326,  331,  326,  326,
      326,  326,  327,  326,  332,  326,  326,  326,  328,  333,
      329,  334,  335,  326,  326,  326,   56,  336,  337,  326,
      326,  326,  326,  326,  326,  326,  326,  338,  326,  326,
      326,  326,  326,  330,  330,  339,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      331,  340,  326,  341,  342,  334,  326,  343,  335,  344,

       56,  326,  326,  326,  326,  326,  326,  345,  326,  346,
      326,  336,  347,  337,  348,  326,  326,  326,  326,  338,
      330,  330,  330,  339,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  349,  341,  342,  350,
      351,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  345,  346,  352,  353,  354,  355,
      336,  347,  356,  330,  326,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  349,  350,  351,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  352,  326,  357,
      353,  358,  326,  359,  326,  354,  360,  355,  361,  326,

      356,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      326,  326,  326,  326,  326,  326,  326,  362,  363,  364,
      359,  365,  366,  367,  368,  354,  360,  369,  330,  330,
      330,  330,  330,  330,  330,  330,  326,  180,  326,  326,
      326,  326,  326,  362,  363,  364,  365,  326,  370,  366,
      371,  326,  326,  326,  367,  372,  368,  373,  326,  369,
      330,  330,  330,  330,  330,  330,  326,  326,  326,  374,
      375,  367,  372,  376,  330,  330,  330,  330,  330,  374,
      375,  326,  376,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,    0,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326
    } ;

static const flex_int16_t yy_nxt[1627] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    4,
       13,   14,    4,   15,   16,   17,   18,   19,    4,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   26,   26,
       29,   26,   30,   31,   32,   33,   26,   26,   34,   35,
       26,   26,   36,   26,    4,    4,    4,   37,   26,   38,
       39,   40,   41,   41,   41,   41,   44,   46,   44,  282,
       47,   61,   61,   61,   61,   62,   62,   63,   73,   64,
       64,  272,   63,   73,   64,   64,   69,   70,  259,   65,
       73,  226,   73,  200,   65,   66,   77,  165,   44,   75,
       66,   41,   41,   67,   73,   68,   50,   45,   67,   76,

       73,  119,   78,   73,   76,   48,   51,   51,   73,   52,
       73,   76,   53,   76,   73,   73,   54,   73,   54,   55,
       83,   56,   57,   79,   80,   76,   92,   84,   73,   81,
       73,   76,   44,   82,   76,   73,   44,   85,   87,   76,
      161,   76,   86,   88,   97,   76,   76,  121,   76,  119,
       89,   97,   90,   55,   59,  101,  101,  102,  102,   76,
       97,   76,   62,   62,  117,  117,   76,  118,  109,  109,
       61,   61,   65,   45,   50,   51,   51,   73,   52,  110,
      111,   53,  100,   62,   62,   54,   66,   54,   55,  122,
       56,   57,   98,   65,   63,   73,   64,   64,  115,  116,

      326,  116,   73,   73,  117,  117,   65,  123,   76,   93,
       73,  113,   66,   73,   73,   72,   73,   73,   71,  127,
       67,  125,   73,   59,  103,  103,   76,   73,   73,   73,
       73,  126,  133,   76,   76,  103,  128,  104,  129,   57,
       57,   76,   73,  131,   76,   76,  130,   76,   76,  105,
       44,  134,   44,   76,   44,  106,  132,   97,   76,   76,
       76,   76,   97,  107,  135,  108,  136,  109,  109,   97,
      101,  101,  326,   76,  103,  103,   60,  145,  110,  145,
      109,  109,  146,  146,   42,  103,  117,  117,   92,  102,
      102,  110,   50,   45,  326,   73,  326,   73,   98,  105,

      100,  103,  103,  326,  103,  103,  143,  115,  144,  144,
      326,  142,  103,  142,  143,  103,  144,  144,  164,  102,
      102,  326,  147,  147,  151,  151,   76,   73,   76,  105,
      148,   73,  152,  149,   73,  153,  156,  156,   73,  157,
      109,  109,  158,   73,   73,   73,   73,  169,   73,   73,
       73,  110,  111,  150,   44,  154,   44,  171,   76,  166,
      167,   73,   76,  168,   44,   76,   97,  173,   97,   76,
      179,  179,  172,  174,   76,   76,   76,   76,  170,   76,
       76,   76,   73,  113,  160,  180,  180,  189,  175,  146,
      146,  189,   76,   73,   92,   45,  180,  189,  181,   97,

      144,  144,   50,  103,  103,  326,  100,   98,  205,  326,
      182,  184,  184,   76,  103,  147,  147,  326,  146,  146,
      147,  147,   73,  148,   76,  192,  149,  326,  148,  199,
      183,  149,  183,  149,  149,  184,  184,  115,  190,  151,
      151,  153,  153,  183,  149,  183,   44,  152,  184,  184,
      153,   97,  153,   76,  185,  186,  185,  186,  151,  151,
      151,  151,  193,  193,  156,  156,  152,  157,  152,  153,
      158,  153,   73,  194,  195,  326,  326,   73,   73,   73,
       73,  326,   97,   73,   92,  189,  326,  326,  204,  187,
      203,   73,   98,   73,  202,  214,  189,  214,  237,  237,

      215,  215,  326,   76,  210,  197,  207,  326,   76,   76,
       76,   76,  160,  206,   76,  326,  208,  189,  326,  209,
      100,  326,   76,  192,   76,  180,  180,  326,  180,  180,
      186,  186,  221,  221,  326,  222,  180,  190,  223,  180,
      179,  179,  326,  179,  179,  186,  186,  326,  193,  193,
      182,  180,  180,  182,  217,  199,  218,  147,  147,  194,
       97,  211,  180,  211,  212,  148,  213,  213,  149,  217,
      151,  151,  184,  184,  193,  193,  109,  109,  152,   73,
      225,  153,  193,  193,   73,  194,   73,  110,  216,   73,
       73,   73,   73,  194,  195,  189,   73,  230,  115,   73,

      215,  215,  248,  231,  212,  229,  213,  213,  268,  268,
       76,  326,  234,  235,  232,   76,  236,   76,  233,  189,
       76,   76,   76,   76,  248,  197,  326,   76,  326,  248,
       76,  238,  238,  326,  180,  180,  190,  189,  326,  239,
      147,  147,  180,  249,  240,  180,  213,  213,  148,  215,
      215,  149,  151,  151,   73,   73,  241,  192,  221,  221,
      152,  222,  251,  153,  223,  252,  252,  258,  326,  326,
       73,  242,   73,  253,   73,  199,  194,  254,   73,  326,
      326,   73,  189,  243,   73,   76,   76,  189,  238,  238,
      248,  261,  267,  262,  267,  263,  239,  268,  268,  248,

      326,   76,  326,   76,  265,   76,  225,  248,  256,   76,
      266,  326,   76,  264,  326,   76,  238,  238,  238,  238,
      326,  189,  326,  190,  239,  192,  239,  180,  251,  180,
      326,  237,  237,  237,  237,   73,  147,  147,  151,  151,
      249,  241,  248,  241,  148,  258,  152,  149,   73,  153,
      151,  151,  252,  252,  252,  252,  252,  252,  152,  199,
      253,  153,  253,  194,  253,  194,   76,  194,  254,  269,
      193,  193,   73,  275,   73,   73,   73,  248,  326,   76,
      251,  194,  238,  238,  151,  151,  248,  248,  278,  276,
      239,   73,  152,  180,   73,  153,   73,  268,  268,  256,

       73,  277,  279,   76,   73,   76,   76,   76,  326,  326,
      248,  248,   73,   73,   73,   73,  326,  285,  249,  326,
      326,  286,   76,  284,  258,   76,   73,   76,  249,  252,
      252,   76,  288,  289,   73,   76,   73,  253,  287,   73,
      194,   73,   73,   76,   76,   76,   76,  292,  251,  258,
       73,  326,   73,  290,   73,  291,   73,   76,  326,  293,
       73,  326,   73,  296,   73,   76,   73,   76,  294,  297,
       76,  298,   76,   76,   73,  299,  295,   73,   73,  306,
      301,   76,  302,   76,   73,   76,  303,   76,   73,  300,
       73,   76,  304,   76,  326,   76,  305,   76,  309,  308,

      307,   73,   73,   73,   73,   76,  310,   73,   76,   76,
      312,   73,   73,   73,  314,   76,   73,   73,   73,   76,
       73,   76,  315,  317,  323,  311,  316,  318,  313,   73,
       73,   73,   76,   76,   76,   76,  319,   73,   76,  320,
       73,  326,   76,   76,   76,   73,  322,   76,   76,   76,
      321,   76,  326,  326,  324,  326,  325,  326,  326,  326,
       76,   76,   76,  326,  326,  326,  326,  326,   76,  326,
      326,   76,  326,  326,  326,  326,   76,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   58,   58,   58,  326,   58,  326,   58,
       58,  326,   58,   58,   74,   74,   74,   74,   74,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   94,   94,  326,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   95,   95,  326,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  112,  112,  326,  326,  326,  112,
      112,  112,  112,  112,  112,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  120,  326,
      120,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  137,  137,  326,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  140,  140,  326,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  141,  141,  326,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  155,  326,
      155,  159,  159,  159,  326,  326,  326,  326,  326,  326,

      159,  159,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  163,  163,  326,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  196,  196,  326,  326,  326,  196,  196,  196,

      196,  196,  196,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  219,
      219,  326,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  220,  220,  326,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  224,  224,  224,  326,  326,
      326,  326,  326,  326,  224,  224,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  228,  228,
      326,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  244,  326,  244,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  255,  255,  326,  255,
      326,  255,  255,  255,  255,  255,  255,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  270,  270,  326,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  271,  271,  326,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  274,  274,  326,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,    3,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326
    } ;

static const flex_int16_t yy_chk[1627] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    6,    6,    8,   10,   11,  273,
       10,   14,   14,   15,   15,   16,   16,   18,   23,   18,
       18,  254,   19,   24,   19,   19,   20,   20,  227,   18,
       25,  195,   26,  162,   19,   18,   24,  124,   38,   23,
       19,   41,   41,   18,   27,   18,   11,    8,   19,   23,

       28,  119,   25,   30,   24,   10,   12,   12,   29,   12,
       31,   25,   12,   26,   33,   32,   12,   34,   12,   12,
       30,   12,   12,   27,   28,   27,   38,   31,   35,   29,
       36,   28,   43,   29,   30,   74,   49,   32,   33,   29,
      111,   31,   32,   34,   53,   33,   32,   73,   34,   67,
       35,   52,   36,   54,   12,   54,   54,   55,   55,   35,
       59,   36,   62,   62,  116,  116,   74,   66,   58,   58,
       61,   61,   62,   43,   49,   51,   51,   75,   51,   58,
       58,   51,   53,   63,   63,   51,   61,   51,   51,   75,
       51,   51,   52,   63,   64,   77,   64,   64,   59,   65,

       57,   65,   79,   81,   65,   65,   64,   75,   75,   39,
       78,   58,   64,   86,   80,   22,   82,   87,   21,   79,
       64,   77,   84,   51,   56,   56,   77,   88,   83,   89,
       85,   78,   86,   79,   81,   56,   80,   56,   82,   56,
       56,   78,   90,   84,   86,   80,   83,   82,   87,   56,
       91,   88,   94,   84,   95,   56,   85,   96,   88,   83,
       89,   85,   99,   56,   89,   56,   90,   97,   97,  114,
      101,  101,  121,   90,  102,  102,   13,  105,   97,  105,
      109,  109,  105,  105,    7,  102,  117,  117,   91,  102,
      102,  109,   95,   94,  101,  123,  101,  122,   96,  102,

       99,  103,  103,  121,  104,  104,  142,  114,  142,  142,
        3,  103,  103,  103,  103,  104,  103,  103,  122,  104,
      104,    0,  106,  106,  107,  107,  123,  128,  122,  104,
      106,  125,  107,  106,  126,  107,  110,  110,  127,  110,
      112,  112,  110,  129,  130,  131,  132,  128,  133,  136,
      134,  112,  112,  106,  138,  107,  137,  130,  128,  125,
      126,  135,  125,  127,  139,  126,  140,  133,  141,  127,
      143,  143,  131,  134,  129,  130,  131,  132,  129,  133,
      136,  134,  168,  112,  110,  144,  144,  158,  135,  145,
      145,  160,  135,  171,  137,  138,  144,  157,  144,  163,

      144,  144,  139,  146,  146,    0,  141,  140,  168,    0,
      144,  183,  183,  168,  146,  150,  150,    0,  146,  146,
      147,  147,  173,  150,  171,  158,  150,    0,  147,  160,
      147,  147,  147,  149,  149,  147,  147,  163,  157,  151,
      151,  153,  153,  149,  149,  149,  176,  151,  149,  149,
      151,  177,  153,  173,  151,  151,  153,  153,  154,  154,
      155,  155,  159,  159,  156,  156,  154,  156,  155,  154,
      156,  155,  164,  159,  159,  161,  161,  166,  169,  167,
      170,    0,  178,  175,  176,  191,  161,  161,  167,  154,
      166,  172,  177,  174,  164,  182,  188,  182,  212,  212,

      182,  182,    0,  164,  175,  159,  170,    0,  166,  169,
      167,  170,  156,  169,  175,    0,  172,  198,  161,  174,
      178,    0,  172,  191,  174,  179,  179,    0,  181,  181,
      185,  185,  194,  194,    0,  194,  179,  188,  194,  181,
      179,  179,    0,  181,  181,  186,  186,    0,  189,  189,
      179,  180,  180,  181,  185,  198,  185,  184,  184,  189,
      201,  180,  180,  180,  180,  184,  180,  180,  184,  186,
      187,  187,  184,  184,  193,  193,  200,  200,  187,  202,
      194,  187,  196,  196,  203,  193,  204,  200,  184,  205,
      207,  206,  208,  196,  196,  219,  209,  203,  201,  210,

      214,  214,  222,  204,  211,  202,  211,  211,  267,  267,
      202,    0,  207,  209,  205,  203,  210,  204,  206,  220,
      205,  207,  206,  208,  223,  196,    0,  209,    0,  225,
      210,  213,  213,    0,  215,  215,  219,  228,    0,  213,
      216,  216,  213,  222,  213,  215,  213,  213,  216,  215,
      215,  216,  217,  217,  229,  232,  213,  220,  221,  221,
      217,  221,  223,  217,  221,  224,  224,  225,  226,  226,
      230,  216,  231,  224,  233,  228,  224,  224,  234,  226,
      226,  236,  245,  217,  235,  229,  232,  246,  238,  238,
      250,  230,  241,  231,  241,  233,  238,  241,  241,  247,

        0,  230,    0,  231,  235,  233,  221,  257,  224,  234,
      236,  226,  236,  234,    0,  235,  237,  237,  240,  240,
        0,  260,    0,  245,  237,  246,  240,  237,  250,  240,
        0,  237,  237,  240,  240,  261,  242,  242,  243,  243,
      247,  237,  271,  240,  242,  257,  243,  242,  262,  243,
      244,  244,  248,  248,  252,  252,  255,  255,  244,  260,
      248,  244,  252,  248,  255,  252,  261,  255,  255,  243,
      259,  259,  263,  262,  264,  265,  266,  270,    0,  262,
      271,  259,  268,  268,  269,  269,  274,  280,  265,  263,
      268,  275,  269,  268,  276,  269,  277,  268,  268,  255,

      278,  264,  266,  263,  279,  264,  265,  266,  272,  272,
      281,  283,  284,  286,  307,  285,  272,  277,  270,  272,
      272,  279,  275,  276,  274,  276,  288,  277,  280,  282,
      282,  278,  285,  286,  289,  279,  287,  282,  284,  290,
      282,  292,  291,  284,  286,  307,  285,  289,  281,  283,
      293,  272,  294,  287,  296,  288,  295,  288,    0,  290,
      297,    0,  298,  293,  299,  289,  301,  287,  291,  294,
      290,  295,  292,  291,  302,  295,  292,  300,  304,  301,
      297,  293,  298,  294,  305,  296,  299,  295,  303,  296,
      306,  297,  300,  298,    0,  299,  300,  301,  304,  303,

      302,  308,  309,  310,  312,  302,  305,  311,  300,  304,
      308,  313,  317,  320,  310,  305,  315,  316,  314,  303,
      319,  306,  311,  312,  320,  306,  311,  314,  309,  321,
      322,  318,  308,  309,  310,  312,  315,  324,  311,  316,
      325,    0,  313,  317,  320,  323,  319,  315,  316,  314,
      318,  319,    0,    0,  323,    0,  324,    0,    0,    0,
      321,  322,  318,    0,    0,    0,    0,    0,  324,    0,
        0,  325,    0,    0,    0,    0,  323,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  329,  329,  329,    0,  329,    0,  329,
      329,    0,  329,  329,  330,  330,  330,  330,  330,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  332,  332,    0,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  333,  333,    0,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  336,  336,    0,    0,    0,  336,
      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,

      337,  337,  337,  337,  337,  337,  337,  337,  338,    0,
      338,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  340,  340,    0,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  343,  343,    0,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  344,  344,    0,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  345,    0,
      345,  346,  346,  346,    0,    0,    0,    0,    0,    0,

      346,  346,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  348,  348,    0,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  354,  354,    0,    0,    0,  354,  354,  354,

      354,  354,  354,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  357,
      357,    0,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  358,  358,    0,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  359,  359,  359,    0,    0,
        0,    0,    0,    0,  359,  359,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
        0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  362,    0,  362,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  367,  367,    0,  367,
        0,  367,  367,  367,  367,  367,  367,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  370,  370,    0,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  371,  371,    0,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  373,  373,    0,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "whereLexer.ll"
/* $Id$ -*- mode: c++ -*-

   Author: John Wu <John.Wu at acm.org>
   Lawrence Berkeley National Laboratory
   Copyright (c) 2007-2016 the Regents of the University of California
 */
#line 9 "whereLexer.ll"
/** \file Defines the tokenlizer using Flex C++ template. */

#include "whereLexer.h"		// definition of YY_DECL
#include "whereParser.hh"	// class ibis::wherParser

typedef ibis::whereParser::token token;
typedef ibis::whereParser::token_type token_type;

#define yyterminate() return token::END
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 903 "whereLexer.cc"
/* Flex declarations and options */
#define YY_NO_UNISTD_H 1
#line 26 "whereLexer.ll"
 /*%option noyywrap*/
 /*%option case-insensitive*/
/* regular expressions used to shorten the definitions 

the following definition of a name is somehow bad
DIGIT	[0-9]
ALPHA	[_a-zA-Z]
NAME	{ALPHA}((->)?[{DIGIT}{ALPHA}:.]+)*(\[[^\]]+\])?

this version works -- guess I can not use {ALPHA}
NAME	[_a-zA-Z]((->)?[_a-zA-Z0-9.:\[\]]+)*
*/
#line 919 "whereLexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 49 "whereLexer.ll"


    yylloc->step();

		   /* section defining the tokens */
#line 1057 "whereLexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 327 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 326 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 54 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 55 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 56 "whereLexer.ll"
{return token::LEOP;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 57 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 58 "whereLexer.ll"
{return token::NEQOP;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 59 "whereLexer.ll"
{return token::LTOP;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "whereLexer.ll"
{return token::GEOP;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 61 "whereLexer.ll"
{return token::GTOP;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 62 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "whereLexer.ll"
{return token::EQOP;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 67 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 68 "whereLexer.ll"
{return token::BITOROP;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 69 "whereLexer.ll"
{return token::BITANDOP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 70 "whereLexer.ll"
{return token::MINUSOP;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 71 "whereLexer.ll"
{return token::ADDOP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 72 "whereLexer.ll"
{return token::MULTOP;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 73 "whereLexer.ll"
{return token::DIVOP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 74 "whereLexer.ll"
{return token::REMOP;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 75 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 76 "whereLexer.ll"
{return token::EXPOP;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 77 "whereLexer.ll"
{return token::NOTOP;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 78 "whereLexer.ll"
{return token::NULLOP;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 79 "whereLexer.ll"
{return token::INOP;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 80 "whereLexer.ll"
{return token::OROP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 81 "whereLexer.ll"
{return token::ANDOP;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 82 "whereLexer.ll"
{return token::ANYOP;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 83 "whereLexer.ll"
{return token::XOROP;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 84 "whereLexer.ll"
{return token::LIKEOP;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 85 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 86 "whereLexer.ll"
{return token::ANDNOTOP;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 87 "whereLexer.ll"
{return token::EXISTSOP;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 88 "whereLexer.ll"
{return token::BETWEENOP;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 89 "whereLexer.ll"
{return token::CONTAINSOP;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 90 "whereLexer.ll"
{return token::ISO_TO_UNIXTIME_GMT;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 91 "whereLexer.ll"
{return token::ISO_TO_UNIXTIME_LOCAL;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 92 "whereLexer.ll"
{return token::TO_UNIXTIME_GMT;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 93 "whereLexer.ll"
{return token::TO_UNIXTIME_LOCAL;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 94 "whereLexer.ll"
{return token::FROM_UNIXTIME_LOCAL;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 95 "whereLexer.ll"
{return token::FROM_UNIXTIME_GMT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 96 "whereLexer.ll"
{return token::FROM_UNIXTIME_LOCAL;}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 98 "whereLexer.ll"
{ /* a name, unquoted string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a name: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::NOUNSTR;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 107 "whereLexer.ll"
{ /* an integer or a floating-point number (without a sign) */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a floating-point number: " << yytext;
#endif
    yylval->doubleVal = atof(yytext);
    return token::NUMBER;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 116 "whereLexer.ll"
{ /* a hexidacimal string */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a hexadecimal integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0) {
	throw "failed to parse a hexadecimal integer";
    }
    return token::UINT64;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 129 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readUInt(yylval->uint64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a unsigned integer";
    return token::UINT64;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 141 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
	<< __FILE__ << ':' << __LINE__ << " got a 64-bit integer: " << yytext;
#endif
    const char *tmp = yytext;
    int ierr = ibis::util::readInt(yylval->int64Val, tmp);
    if (ierr != 0)
	throw "failed to parse a long integer";
    return token::INT64;
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 153 "whereLexer.ll"
{/*\(\)*/
    /* a series of long integers */ /*  */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a signed integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::INTSEQ;
}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 163 "whereLexer.ll"
{
    /* a series of unsigned long integers */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a unsigned integer sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::UINTSEQ;
}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 173 "whereLexer.ll"
{ /* a quoted string literal */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a quoted string: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRLIT;
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 182 "whereLexer.ll"
{ /* a number series */
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a number sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::NUMSEQ;
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 191 "whereLexer.ll"
{
#if defined(DEBUG) && DEBUG + 0 > 1
    LOGGER(ibis::gVerbose >= 0)
 	<< __FILE__ << ':' << __LINE__ << " got a string sequence: " << yytext;
#endif
    yylval->stringVal = new std::string(yytext+1, yyleng-2);
    return token::STRSEQ;
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 200 "whereLexer.ll"
; /* do nothing for blank space */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 202 "whereLexer.ll"
{ /* pass the character to the parser as a token */
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 206 "whereLexer.ll"
ECHO;
	YY_BREAK
#line 1481 "whereLexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 327 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 327 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 326);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 206 "whereLexer.ll"

/* additional c++ code to complete the definition of class whereLexer */
ibis::whereLexer::whereLexer(std::istream* in, std::ostream* out)
    : ::_wLexer(in, out) {
#if defined(DEBUG) && DEBUG + 0 > 1
    yy_flex_debug = true;
#endif
}

ibis::whereLexer::~whereLexer() {
}

/* function needed by the super-class of ibis::whereLexer */
#ifdef yylex
#undef yylex
#endif

int ::_wLexer::yylex() {
    return 0;
} // ::_wLexer::yylex

int ::_wLexer::yywrap() {
    return 1;
} // ::_wLexer::yywrap

